<h2 id="computer-architecture">Computer Architecture</h2>
<p>All computers stem from the “stored program concept”. The computer is
based on a fixed hardware platform capable of executing a fixed set of
instructions. They can be combined like building blocks to yield
sophisticated programs.</p>
<p>The von Neumann architecture: - Computers can hold both data and
instructions in memory. - We can compute the instructions with a CPU
that contains registers, an ALU and a control unit</p>
<p>A typical architecture: <img
src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Von_Neumann_Architecture.svg/1200px-Von_Neumann_Architecture.svg.png"
alt="von neumann" /></p>
<h3 id="the-hack-computer-nand-to-tetris">The Hack Computer (Nand To
Tetris)</h3>
<figure>
<img src="https://blog.logancyang.com/images/cs4ds/hackcpuinput.png"
alt="hack cpu interface" />
<figcaption aria-hidden="true">hack cpu interface</figcaption>
</figure>
<p>We can have general purpose or single purpose computers. General
purpose are PCs and cellphones. Single purpose are embedded in cars,
cameras, media stremers.</p>
<p>When computers shared the same address for data and instructions it’s
called the Harvard architecture. They’re cheaper to build and can be
optimized. It’s the architecture of choice in many dedicated embedde
computers.</p>
<p>Much of the work of computer architects goes towards achieving better
performance. This is done by caching algorithms, optimizing access to
I/O devices, parallelism, prefetching amongst others.</p>
<p>The two main camps in design are: Complex Instruction Set Computing
(CISC) and Reduced Instruction Set Computing (RISC). RISC camp builds
simpler processors and tighter instruction set:s, arguing for better
performance.</p>
