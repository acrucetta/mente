<h2>Notes on Software Quality</h2>
<h2>Resources</h2>
<p><strong>From this article: https://lethain.com/quality/</strong></p>
<ul>
<li><em><a
href="https://www.amazon.com/Domain-Driven-Design-Distilled-Vaughn-Vernon/dp/0134434420">Domain-Driven
Design Distilled</a></em> by Vaughn Vernon is a good overview of
domain-driven design, which is an approach to software development that
applies particularly well to working in problem domains with high
essential complexity</li>
<li>“Define errors out of existence” is an idea from John
Ousterhout’s <em><a
href="https://www.amazon.com/Philosophy-Software-Design-2nd-ebook/dp/B09B8LFKQL/">Philosophy
of Software Design</a></em>, and described with some great examples
in <a
href="https://wiki.tcl-lang.org/page/Define+Errors+Out+of+Existence">this
page from the TCL Lang wiki</a></li>
<li>The distinction between essential and accidental complexity,
discussed in Fred Brooks’ <a
href="https://en.wikipedia.org/wiki/No_Silver_Bullet">No Silver
Bullet</a> from <em><a
href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959">Mythical
Man Month</a></em> is a valuable dimension for reasoning about
complexity (and consequently, quality)</li>
<li>Kent Beck’s <em><a
href="https://www.amazon.com/Tidy-First-Personal-Exercise-Empirical/dp/1098151240">Tidy
First?</a></em> discusses a number of strategies for addressing
accidental quality issues within a codebase, mostly those caused by
inconsistent implementations across a large codebase. I <a
href="https://lethain.com/notes-on-tidy-first/">wrote up some notes on
this book</a> a while back</li>
<li>Kent Beck’s <em><a
href="https://www.amazon.com/Tidy-First-Personal-Exercise-Empirical/dp/1098151240">Tidy
First?</a></em> discusses a number of strategies for addressing
accidental quality issues within a codebase, mostly those caused by
inconsistent implementations across a large codebase. I <a
href="https://lethain.com/notes-on-tidy-first/">wrote up some notes on
this book</a> a while back</li>
</ul>
